describe('isSymmetric', () => {
    it('Should return true if the array is symmetric', () => {
        const input = [1, 2, 1];
        const result = isSymmetric(input);
        expect(result).to.be.true;
    });

    it('Should return false if the array is not symmetric', () => {
        expect(isSymmetric([1, 2, 3])).to.be.false;
    });

    it('Should return false if the input is not an array', () => {
        expect(isSymmetric({})).to.be.false;
        expect(isSymmetric('')).to.be.false;
        expect(isSymmetric(NaN)).to.be.false;
        expect(isSymmetric(true)).to.be.false;
        expect(isSymmetric('1,2,3')).to.be.false;
        expect(isSymmetric(-1)).to.be.false;
        expect(isSymmetric(undefined)).to.be.false;
        expect(isSymmetric(null)).to.be.false;
    });

    it('Should return false if symmetric numbers are given as argument', () => {
        expect(isSymmetric(1, 2, 1)).to.be.false;
    });

    it('Should return true if an empty array is given', () => {
        expect(isSymmetric([])).to.be.true;
    });

    it ('Should return true if array with single number is given', () => {
        expect (isSymmetric ([1])).to.be.true;
    });

    it ('Should return true if the input is string array', () => {
        expect (isSymmetric (["pesho", "gosho", "pesho"])).to.be.true;
        expect (isSymmetric ([3.14, -1, 3.14])).to.be.true;
        expect (isSymmetric ([true, false, true])).to.be.true;
    });

    it ('Return false for symmetric array', () => {
        expect (isSymmetric ([1,2,"1"])).to.be.false;
    });
});
